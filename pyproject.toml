[tool.poetry]
name = "mirrormanager2"
version = "1.0.0"
description = "The application used to managed the Fedora mirrors all over the world."
authors = [
    "Fedora Infrastructure team <admin@fedoraproject.org>",
]
maintainers = [
    "Aur√©lien Bompard <aurelien@bompard.org>",
    "Pierre-Yves Chibon <pingou@pingoured.fr>",
]
homepage = "https://github.com/fedora-infra/mirrormanager2"
repository = "https://github.com/fedora-infra/mirrormanager2"
license = "MIT"
readme = "README.rst"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Flask",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: POSIX :: Linux",
]
packages = [
    { include = "mirrormanager2" },
    { include = "tests", format = "sdist" },
]

include = [
    { path = "runserver.py", format = "sdist" },
    { path = "mirrormanager.proto", format = "sdist" },
    { path = "doc", format = "sdist" },
    { path = "tox.ini", format = "sdist" },
    { path = "testdata", format = "sdist" },
    { path = "client/report_mirror.conf", format = "sdist" },
    { path = "utility", format = "sdist" },
]


[tool.poetry.dependencies]
python = "^3.9,<3.13"
email-validator = ">=1.1.3"
flask = "^2.2.3 || ^3.0.0"
flask-admin = "^1.6.0"
flask-oidc = "^2.0.0"
flask-xml-rpc-re = "^0.1.4"
flask-wtf = "^1.1.1"
wtforms = "^3.0.1"
ipy = "^1.1"
dnspython = "^2.3.0"
backoff = "^2.2.1"
fedora-messaging = "^3.3.0"
sqlalchemy-helpers = "^0.13.0"
matplotlib = {version = "^3.8.1", optional = true}
click = "^8.1.7"
geoip2 = {version = "^4.7.0", optional = true}
gunicorn = {version = "^21.2.0", optional = true}
psycopg2 = {version = "^2.9.9", optional = true}
basemap = {version = "^1.4.0", optional = true}
basemap-data = {version = "^1.3.2", optional = true}
basemap-data-hires = {version = "^1.3.2", optional = true}
whitenoise = "^6.6.0"
rich = "^13.7.0"
mrtparse = "^2.2.0"

[tool.poetry.group.dev.dependencies]
black = ">=22.6.0"
pytest = "^7.1.2"
pytest-cov = ">=3.0.0"
coverage = {extras = ["toml"], version = ">=7.0.0"}
ruff = ">=0.0.253"
sphinx = ">=6.1.3"
blinker = "^1.6.2"
sphinxcontrib-httpdomain = "^1.8.1"
cloud-sptheme = "^1.10.1.post20200504175005"
oidc-register = "^0.2.1"
responses = "^0.23.3"

[tool.poetry.scripts]
report_mirror = { reference = "client/report_mirror", type = "file" }
mm2_crawler = "mirrormanager2.crawler.cli:main"
mm2_emergency-expire-repo = "mirrormanager2.utility.emergency_expire_repo:main"
mm2_get_netblocks = "mirrormanager2.utility.netblocks:main"
mm2_move-devel-to-release = "mirrormanager2.utility.move_to_release:main"
mm2_move-to-archive = "mirrormanager2.utility.move_to_archive:main"
mm2_update-EC2-netblocks = "mirrormanager2.utility.update_ec2_netblocks:main"
mm2_update-master-directory-list = "mirrormanager2.utility.update_master_directory_list:main"
mm2_umdl2 = "mirrormanager2.utility.umdl2:main"
mm2_create_install_repo = "mirrormanager2.utility.create_install_repo:main"
mm2_upgrade-install-repo = "mirrormanager2.utility.upgrade_install_repo:main"
mm2_last-sync = "mirrormanager2.utility.last_sync:main"
mm2_expire-stats = "mirrormanager2.utility.expire_statistics:main"
mm2_mirrorlist-statistics = "mirrormanager2.utility.mirrorlist_statistics:main"



[tool.poetry.extras]
graph = ["matplotlib", "geoip2", "basemap", "basemap-data", "basemap-data-hires"]
deploy = ["gunicorn", "psycopg2"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 100

[tool.ruff]
select = ["E", "F", "W", "I", "B", "UP"]
line-length = 100
target-version = "py39"

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S105", "S106"]
"doc/conf.py" = ["E402"]
"mirrormanager2/app.py" = ["E402"]
"mirrormanager2/default_config.py" = ["S105"]
"utility/*" = ["E402"]
"client/report_mirror" = ["E402"]
"mirrorlist/mirrorlist_statistics" = ["E402"]

[tool.coverage.run]
branch = true
source = ["mirrormanager2"]

[tool.coverage.paths]
source = ["mirrormanager2", "utility"]

[tool.coverage.report]
# fail_under = 80
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    # Don't complain if tests don't hit defensive assertion code
    "raise AssertionError",
    "raise NotImplementedError",
    "\\.\\.\\.",
]
omit = [
    #"mirrormanager2/__init__.py",
    "mirrormanager2/migrations/env.py",
    "tests/*",
]
